/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export type AVLTree = AvlTree
/**
 * A Node.jsâ€“exposed AVL tree that supports number or string keys and values.
 *
 * The AVL tree is a self-balancing binary search tree that supports insertion,
 * bulk insertion, search by key, removal by key, and dumping the tree contents (in-order traversal).
 */
export declare class AvlTree {
  /**
   * Creates a new, empty AVL tree.
   *
   *
   * # Returns
   *
   * A new instance of AVLTree with no nodes.
   *
   *
   */
  constructor()
  /**
   * Inserts a single node with the specified key and value into the AVL tree.
   *
   *
   * If a node with the same key already exists, its value is updated to the provided value.
   *
   *
   * # Parameters
   *
   * - key: A number or a string that represents the key.
   * - value: A number or a string that represents the value.
   *
   *
   * # Example (TypeScript)
   *
   *
   * ```ts
   * const tree = new AvlTree();
   * tree.insert(42, "The answer");
   * ```
   *
   *
   */
  insert(key: number | string, value: number | string): void
  /**
   * Searches for a node in the AVL tree by its key.
   *
   *
   * If a node with the specified key exists, returns its associated value.
   * Otherwise, returns null.
   *
   *
   * # Parameters
   *
   * - key: The key to search for (number or string).
   *
   *
   * # Returns
   *
   * The value associated with the key if found, or null if no such node exists.
   *
   *
   * # Example (TypeScript)
   *
   *
   * ```ts
   * const value = tree.search("myKey");
   * if (value !== null) {
   *   console.log("Found:", value);
   * } else {
   *   console.log("Not found");
   * }
   * ```
   *
   *
   */
  search(key: number | string): number | string | null
  /**
   * Returns a string representing all nodes in the AVL tree using in-order traversal.
   *
   *
   * The returned string lists the nodes in sorted order by key. Each node is represented
   * by its key and value.
   *
   *
   * # Returns
   *
   * A string that contains the representation of all nodes in the tree.
   *
   *
   * # Example (TypeScript)
   *
   *
   * ```ts
   * console.log(tree.dump());
   * // Might output: "{ key: 5, value: 'five' }, { key: 10, value: 'ten' }, { key: 15, value: 'fifteen' }"
   * ```
   *
   *
   */
  dump(): string
  /**
   * Removes a node from the AVL tree by its key.
   *
   *
   * If a node with the specified key exists, it is removed from the tree and its associated
   * value is returned. If no such node exists, null is returned.
   *
   *
   * # Parameters
   *
   * - key: A number or a string that represents the key of the node to be removed.
   *
   *
   * # Returns
   *
   * The value associated with the removed node if removal was successful, or null otherwise.
   *
   *
   * # Example (TypeScript)
   *
   *
   * ```ts
   * const removedValue = tree.remove(42);
   * if (removedValue !== null) {
   *   console.log("Removed:", removedValue);
   * } else {
   *   console.log("Key not found");
   * }
   * ```
   *
   *
   */
  remove(key: number | string): number | string | null
  /**
   * Checks if a node with the specified key exists in the AVL tree.
   *
   *
   * # Parameters
   *
   * - key: A number or a string that represents the key to check.
   *
   *
   * # Returns
   *
   * `true` if a node with the specified key exists, `false` otherwise.
   *
   *
   * # Example (TypeScript)
   *
   *
   * ```ts
   * const tree = new AvlTree();
   * tree.insert(42, "The answer");
   *
   * if (tree.has(42)) {
   *   console.log("Key exists in the tree");
   * } else {
   *   console.log("Key not found");
   * }
   * ```
   *
   *
   */
  has(key: number | string): boolean
}
